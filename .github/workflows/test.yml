name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    name: Node ${{ matrix.node-version }} Test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Lint
      run: |
        npm run lint
        npm run format -- --check
      
    - name: Run tests
      id: tests
      continue-on-error: true
      run: npm test

    - name: Debug conditions
      run: |
        echo "github.ref: ${{ github.ref }}"
        echo "matrix.node-version: ${{ matrix.node-version }}"

    - name: Debug coverage file
      run: |
        echo "Checking for coverage file..."
        ls -la coverage/ || echo "Coverage directory does not exist"
        if [ -f coverage/coverage-summary.json ]; then
          echo "Coverage file exists"
          cat coverage/coverage-summary.json
        else
          echo "Coverage file does not exist"
        fi

    - name: Generate coverage badges
      if: github.ref == 'refs/heads/main' && matrix.node-version == '20.x'
      continue-on-error: true
      run: |
        if [ -f coverage/coverage-summary.json ]; then
          # Get total coverage percentage (using lines as the main metric)
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r ".total.lines.pct")
          
          # Create badge based on coverage threshold
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            # Create red badge for failing coverage
            curl "https://img.shields.io/badge/coverage-${COVERAGE}%25-red" > "./coverage/badges/coverage.svg"
          else
            # Create green badge for passing coverage
            curl "https://img.shields.io/badge/coverage-${COVERAGE}%25-brightgreen" > "./coverage/badges/coverage.svg"
          fi
        else
          echo "No coverage data found - skipping badge generation"
          exit 1
        fi

    - name: Update README with coverage
      if: github.ref == 'refs/heads/main' && matrix.node-version == '20.x'
      continue-on-error: true
      run: |
        if [ -f coverage/coverage-summary.json ]; then
          # Get total coverage percentage
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
          
          sed -i '/<!-- coverage-start -->/,/<!-- coverage-end -->/c\<!-- coverage-start -->[![Coverage](/coverage/badges/coverage.svg)](#)<!-- coverage-end -->' README.md
        else
          echo "No coverage data found - skipping README update"
          exit 1
        fi

    - name: Commit coverage results
      if: github.ref == 'refs/heads/main' && matrix.node-version == '20.x'
      # Remove dependency on previous step success
      continue-on-error: true
      run: |
        if [ -f coverage/coverage-summary.json ]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add coverage/badges README.md
          git commit -m "docs: update coverage badges [skip ci]" || echo "No changes to commit"
          git push 
        else
          echo "No coverage data found - skipping commit"
          exit 1
        fi 