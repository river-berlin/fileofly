name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    name: Node ${{ matrix.node-version }} Test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Lint
      run: |
        npm run lint
        npm run format -- --check
      
    - name: Run tests
      id: tests
      continue-on-error: true
      run: npm test

    - name: Generate coverage badges
      if: github.ref == 'refs/heads/main' && matrix.node-version == '20.x'
      # Remove dependency on previous step success
      continue-on-error: true
      run: |
        # Only proceed if coverage data exists
        if [ -f coverage/coverage-summary.json ]; then
          npm install -g jest-coverage-badges
          # Generate standard coverage badges
          jest-coverage-badges --output ./coverage/badges
          
          # Generate failing badges for low coverage
          for metric in statements branches functions lines; do
            coverage=$(cat coverage/coverage-summary.json | jq -r ".total.${metric}.pct")
            if (( $(echo "$coverage < 80" | bc -l) )); then
              # Create red badge for failing metrics
              curl "https://img.shields.io/badge/${metric}-${coverage}%25-red" > "./coverage/badges/badge-${metric}-failing.svg"
            else
              # Create green badge for passing metrics
              curl "https://img.shields.io/badge/${metric}-${coverage}%25-brightgreen" > "./coverage/badges/badge-${metric}-passing.svg"
            fi
          done
        else
          echo "No coverage data found - skipping badge generation"
          exit 1
        fi

    - name: Update README with coverage
      if: github.ref == 'refs/heads/main' && matrix.node-version == '20.x'
      # Remove dependency on previous step success
      continue-on-error: true
      run: |
        # Only proceed if coverage data exists
        if [ -f coverage/coverage-summary.json ]; then
          # Get coverage percentages
          COVERAGE=$(cat coverage/coverage-summary.json)
          STATEMENTS=$(echo $COVERAGE | jq -r '.total.statements.pct')
          BRANCHES=$(echo $COVERAGE | jq -r '.total.branches.pct')
          FUNCTIONS=$(echo $COVERAGE | jq -r '.total.functions.pct')
          LINES=$(echo $COVERAGE | jq -r '.total.lines.pct')
          
          # Update README.md with coverage badges, including status
          sed -i '/<!-- coverage-start -->/,/<!-- coverage-end -->/c\<!-- coverage-start -->\n![Statements](coverage/badges/badge-statements-'"$([ $(echo "$STATEMENTS < 80" | bc -l) ] && echo 'failing' || echo 'passing')"'.svg)\n![Branches](coverage/badges/badge-branches-'"$([ $(echo "$BRANCHES < 80" | bc -l) ] && echo 'failing' || echo 'passing')"'.svg)\n![Functions](coverage/badges/badge-functions-'"$([ $(echo "$FUNCTIONS < 80" | bc -l) ] && echo 'failing' || echo 'passing')"'.svg)\n![Lines](coverage/badges/badge-lines-'"$([ $(echo "$LINES < 80" | bc -l) ] && echo 'failing' || echo 'passing')"'.svg)\n<!-- coverage-end -->' README.md
        else
          echo "No coverage data found - skipping README update"
          exit 1
        fi

    - name: Commit coverage results
      if: github.ref == 'refs/heads/main' && matrix.node-version == '20.x'
      # Remove dependency on previous step success
      continue-on-error: true
      run: |
        if [ -f coverage/coverage-summary.json ]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add coverage/badges README.md
          git commit -m "docs: update coverage badges [skip ci]" || echo "No changes to commit"
          git push 
        else
          echo "No coverage data found - skipping commit"
          exit 1
        fi 